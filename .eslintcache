[{"/Users/anapoletano/Flatiron/code/Mod5/findex/src/index.js":"1","/Users/anapoletano/Flatiron/code/Mod5/findex/src/reportWebVitals.js":"2","/Users/anapoletano/Flatiron/code/Mod5/findex/src/App.js":"3","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Footer.js":"4","/Users/anapoletano/Flatiron/code/Mod5/findex/src/MainContainer.js":"5","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/ProfileRelated/Profile.js":"6","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionContainer.js":"7","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionList.js":"8","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/Search.js":"9","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionCard.js":"10","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/MonthGraph.js":"11","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/CategoryContainer.js":"12","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BudgetPage.js":"13","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/CategoryCard.js":"14","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/ProfileRelated/MonthComparisonChart.js":"15","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/Modal/MonthlyIncomeModal.js":"16","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Login.js":"17","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/Modal/CreateNewMonthModal.js":"18","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/HomePage/Home.js":"19","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/ProgressBar.js":"20","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/InvestmentMain.js":"21","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/CoinCard.js":"22","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/Columns.js":"23","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/CryptoTable.js":"24","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/NavBar/NavBar.js":"25","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/NavBar/NavBarData.js":"26"},{"size":587,"mtime":1612380312485,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1612378419870,"results":"29","hashOfConfig":"28"},{"size":422,"mtime":1613419342668,"results":"30","hashOfConfig":"28"},{"size":116,"mtime":1612379400993,"results":"31","hashOfConfig":"28"},{"size":824,"mtime":1613405654141,"results":"32","hashOfConfig":"28"},{"size":696,"mtime":1612880419540,"results":"33","hashOfConfig":"28"},{"size":2398,"mtime":1613456097661,"results":"34","hashOfConfig":"28"},{"size":1142,"mtime":1613455994904,"results":"35","hashOfConfig":"28"},{"size":493,"mtime":1612979101007,"results":"36","hashOfConfig":"28"},{"size":764,"mtime":1613456457790,"results":"37","hashOfConfig":"28"},{"size":2341,"mtime":1613448757892,"results":"38","hashOfConfig":"28"},{"size":2601,"mtime":1613454664025,"results":"39","hashOfConfig":"28"},{"size":9368,"mtime":1613455809437,"results":"40","hashOfConfig":"28"},{"size":3320,"mtime":1613455637898,"results":"41","hashOfConfig":"28"},{"size":3565,"mtime":1613405654141,"results":"42","hashOfConfig":"28"},{"size":2952,"mtime":1613453285009,"results":"43","hashOfConfig":"28"},{"size":561,"mtime":1612905207248,"results":"44","hashOfConfig":"28"},{"size":4150,"mtime":1612985784855,"results":"45","hashOfConfig":"28"},{"size":1586,"mtime":1613484038655,"results":"46","hashOfConfig":"28"},{"size":798,"mtime":1613453926483,"results":"47","hashOfConfig":"28"},{"size":2113,"mtime":1613405654139,"results":"48","hashOfConfig":"28"},{"size":1140,"mtime":1613405654137,"results":"49","hashOfConfig":"28"},{"size":1114,"mtime":1613405654138,"results":"50","hashOfConfig":"28"},{"size":2339,"mtime":1613405654139,"results":"51","hashOfConfig":"28"},{"size":2987,"mtime":1613484411911,"results":"52","hashOfConfig":"28"},{"size":714,"mtime":1613448757896,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"7dmnfc",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/anapoletano/Flatiron/code/Mod5/findex/src/index.js",[],["117","118"],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/reportWebVitals.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/App.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Footer.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/MainContainer.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/ProfileRelated/Profile.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionContainer.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionList.js",["119"],"import React, {useState} from 'react'\nimport Search from './Search'\nimport TransactionCard from './TransactionCard'\nimport \"./Transactions.css\"\n\n\nfunction TransactionList({transactions, handleRemoveTransaction, categoriesList}){\n\n    const [selectedCategory, setSelectedCategory] = useState(\"all\")\n\n\n    // console.log(selectedCategory)\n\n    function handleChange(value){\n        setSelectedCategory(value)\n    }\n\n    const filteredTransactions = transactions.filter(transaction =>{\n        if (selectedCategory === \"all\"){\n            return transaction \n        }\n        return transaction.category_id == selectedCategory\n    })\n\n    const transactionsObj = filteredTransactions.map((transaction=> {\n        return <TransactionCard key={transaction.id} transaction={transaction} handleRemoveTransaction={handleRemoveTransaction}/>\n    }))\n\n    return( \n        <>\n        <div className=\"transaction-list-div\">\n            <h3>Transactions:</h3>\n            <Search categoriesList={categoriesList} handleChange={handleChange}/>\n            {transactionsObj}\n            \n\n        </div>\n        </>\n    )\n}\n\n\nexport default TransactionList","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/Search.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionCard.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/MonthGraph.js",["120"],"import React, { useState, useEffect } from 'react';\nimport {  Doughnut } from \"react-chartjs-2\";\n\n\n\nfunction MonthGraph({selectedMonthData}){\n    const [chartData, setChartData] = useState({})\n    \n    const categoryLabels = selectedMonthData.categories.map(data => data.name)\n    const categoryData = selectedMonthData.categories.map(data => data.budget)\n\n    function chart(){\n        setChartData({\n            labels: categoryLabels,\n            datasets: [\n                {\n                    data: categoryData,\n                    lineTension: 0.1,\n                    backgroundColor: [\"#9acd32\",\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\", \"#bdffbe\", \"#808000\", \"556b2f\"],\n                    borderColor: [\"#9acd32\",\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\",  \"#bdffbe\", \"#808000\",\"556b2f\" ],\n                    borderCapStyle: \"butt\",\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: \"miter\",\n                    pointBorderColor: \"#2085d8\",\n                    pointBackgroundColor: \"#FFF\",\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: \"#2f3640\",\n                    pointHoverBorderColor: \"#2085d8\",\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                }\n            ]\n        })\n    }\n\n    useEffect(() => {\n        chart()\n    }, [selectedMonthData])\n\n    let chartOptions = {\n        responsive: true,\n        title: { text: \"Budget Broken Down into Categories\", \n                display:true, \n                fontSize: 30 \n        },    \n        legend: {\n            position: 'left',\n            labels: {\n                fontSize: 18,\n                padding: 12\n            }\n        },\n        cutoutPercentage: 40,\n        animation: {\n            animateRotate: false,\n            animateScale: true\n          }\n    \n        \n    }\n\n\n    return(\n        <div className=\"doughnut-chart\">\n            <Doughnut\n                data={chartData} \n                options={chartOptions} \n            />\n            \n        </div>\n    );\n}\n\n\nexport default MonthGraph","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/CategoryContainer.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BudgetPage.js",["121","122","123"],"import React, {useEffect, useState} from 'react'\n// import {useHistory} from 'react-router-dom'\nimport TransactionContainer from './BottomHalfBudgetPage/TransactionContainer'\nimport CreateNewMonthModal from './Modal/CreateNewMonthModal'\nimport Modal from './Modal/MonthlyIncomeModal'\nimport CategoryContainer from './TopHalfBudgetPage/CategoryContainer'\nimport MonthGraph from './TopHalfBudgetPage/MonthGraph'\nimport styled from \"styled-components\";\nimport './BudgetPage.css'\nimport * as BiIcons from \"react-icons/bi\";\n\n\nfunction BudgetPage(){\n    const [showMIModal, setShowMIModal] = useState(false)\n    const [createMonthModal, setCreateMonthModal] = useState(false)\n    const [allMonths, setAllMonths]= useState({})\n    const [selectedMonthNumber, setSelectedMonthNumber] = useState(44) /// let's auto select this\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [transactions, setTransactions] = useState([]) //used to refresh page\n    \n    //look @ time.now to set initial date on page load\n    \n    //initial load\n    useEffect(()=> {\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/monthly_budgets`)\n        .then(resp => resp.json())\n        .then(data => {\n            setAllMonths(data)\n            setIsLoaded(true)\n        })\n    }, [transactions, selectedMonthNumber])\n    \n    if (!isLoaded) return <h2>Loading...</h2>;\n    \n    const existingMonthNums = allMonths.map(month => month.id )\n   \n    function submitTransaction(formData){\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/transactions`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formData),\n        })\n        .then(response => response.json())\n        .then(data => {\n            setTransactions(data);\n        })\n    }\n    \n    function handleRemoveTransaction(id){\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/transactions/${id}`, {\n            method: \"DELETE\"\n        })\n        .then(response => response.json())\n        .then(data => setTransactions(data))\n    }\n    \n    const selectedMonthData = allMonths.find(month=>(month.id == selectedMonthNumber))\n    \n    function handleRemoveCategory(id){\n        \n        fetch(`${process.env.REACT_APP_API_BASE_URL}/categories/${id}`, {\n            method: \"DELETE\"\n            })\n            .then(response => response.json())\n            .then(data => setTransactions(data))\n        \n    }\n\n    function createCategory(formData){\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/categories`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formData),\n          })\n          .then(response => response.json())\n          .then(data => {\n            setTransactions(data);\n          })\n    }\n\n    function submitCategoryEdit(data){\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/categories/${data.id}`, {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n          })\n          .then(response => response.json())\n          .then(data => setTransactions(data))\n    }\n\n    function updateMonthBudget(data){\n        console.log(data)\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/monthly_budgets/${selectedMonthNumber}`, {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n          })\n          .then(response => response.json())\n          .then(data=> setTransactions(data))\n    }\n\n    function monthForward(){\n           if( existingMonthNums.indexOf(selectedMonthNumber+1)>-1 ){\n            setSelectedMonthNumber((selectedMonthNumber+1))\n        }\n    }\n\n    function monthBack(){\n        if(existingMonthNums.indexOf(selectedMonthNumber)){\n            setSelectedMonthNumber((selectedMonthNumber-1))\n        }\n    }\n    \n    //sum up total budget\n    const totalBudget = selectedMonthData.categories.map(category => (category.budget))\n    .reduce(( accumulator, currentValue ) => accumulator + currentValue,0).toFixed(2)\n\n    //sums up total spent\n    const totalSpent = selectedMonthData.transactions.map(transaction => transaction.amount)\n    .reduce(( accumulator, currentValue ) => accumulator + currentValue,0).toFixed(2)\n\n    const percentageSpent = (totalSpent / selectedMonthData.budget)*100\n    const mainProgressBarStyle ={\n        width: `${percentageSpent}%`,\n        background: \"#00468c\",\n    }\n\n    //used to not enable this variable unless there is data-- refactor?\n    let biggestTransaction = 0\n    {selectedMonthData.transactions[0] ?\n         biggestTransaction = selectedMonthData.transactions.reduce(\n        (accumulator,obj) => (obj.amount > accumulator.amount ? obj : accumulator))\n    :  biggestTransaction=0}\n\n    return( \n        <div className=\"budget-page-div\">\n            <div className=\"month-change-buttons-div\">\n                {(existingMonthNums.indexOf(selectedMonthNumber-1) > -1)? <h1 onClick={monthBack} className=\"month-back\">  <BiIcons.BiLeftArrow/>  </h1>: null}\n                <h2>{selectedMonthData.name}</h2>\n                {(existingMonthNums.indexOf(selectedMonthNumber+1) > -1)? <h1 onClick={monthForward} className=\"month-forward\"> <BiIcons.BiRightArrow/> </h1>: null}\n            </div>\n            {(existingMonthNums.indexOf(selectedMonthNumber+1) > -1)? null : <button onClick={() => setCreateMonthModal(true)}>Create New Month</button>}\n\n            \n            <div className=\"progress-bar\">\n                    <div className=\"progress-filler\" style={mainProgressBarStyle} ></div>\n                    <br></br>\n                    <PercentageSpentLabel>Spent: ${totalSpent}</PercentageSpentLabel>\n                    <TotalIncomeLabel>Income ${selectedMonthData.budget}</TotalIncomeLabel>\n                    <EditMonthlyIncome onClick={() => setShowMIModal(true)}>Adjust</EditMonthlyIncome>\n                    \n            </div>\n           <div style={{height: \"40px\"}}></div> {/* used to move chart lower  */}\n            <br></br>\n\n            <Modal \n                show={showMIModal} \n                onClose={() => setShowMIModal(false)}\n                updateMonthBudget={updateMonthBudget}\n            />\n            <CreateNewMonthModal \n                show={createMonthModal}\n                onClose={() => setCreateMonthModal(false)}\n                setSelectedMonthNumber = {setSelectedMonthNumber}\n            \n            />\n\n            <div className=\"top-half-budget-page\">\n                \n                <div className=\"text-and-chart-budget-page\">\n\n                    {selectedMonthData.transactions[0] ? //only display text if transacitons exist\n                        <div className=\"top-half-budget-page-text\">\n                            <div className=\"adjust-add-budget-buttons-div\">\n                                {existingMonthNums.indexOf(selectedMonthNumber+1) == -1 ? <button onClick={() => setCreateMonthModal(true)}>Create New Month</button> : null}\n                            </div>  \n                                {totalBudget > selectedMonthData.budget ? \n                                    <p> Total budget ${totalBudget}. Your budget is higher than your income this month</p> \n                                    : <p>Total budget: {totalBudget}</p>\n                                }\n                            <p>Your highest spend item this month was <strong>{biggestTransaction.name}</strong> where you spent <strong>${biggestTransaction.amount.toFixed(2)}</strong>.</p>\n                            <p> and your highest spend category was :</p>\n                        </div>\n                    : null }\n                    <div className=\"budget-page-chart-div\">\n                        {selectedMonthData.categories[0]? (\n                        <MonthGraph selectedMonthData={selectedMonthData}/> \n                        ) : (\n                        <div className=\"no-categories-div\">\n                            <h3>You should create some categories for this month</h3>\n                            <h3>Use the button below</h3></div>)}\n                        </div>\n                </div>\n                <CategoryContainer \n                    selectedMonthData={selectedMonthData} \n                    createCategory={createCategory} \n                    handleRemoveCategory={handleRemoveCategory}\n                    submitCategoryEdit={submitCategoryEdit}\n                />\n            </div>\n\n            {selectedMonthData.categories[0] ? \n                <div className=\"bottom-half-budget-page\">\n                    <TransactionContainer selectedMonthData={selectedMonthData} submitTransaction={submitTransaction} handleRemoveTransaction={handleRemoveTransaction}/>\n                </div>\n            : null}\n        </div>\n    )\n}\n\n\nconst TotalIncomeLabel = styled.div`\nposition:absolute;\nright: 40px;\n`;\n\nconst PercentageSpentLabel = styled.div`\n  position:absolute;\n    left: 40px;\n\n`\n\nconst EditMonthlyIncome = styled.button`\n    position:absolute;\n    right: -25px;\n    border-radius: 7px;\n    padding: 4px 8px;\n    border: none;\n    color: #fff;\n    background: #141414;\n    cursor: pointer;\n`;\n\n\n\nexport default BudgetPage","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/CategoryCard.js",["124","125"],"import React, {useState} from 'react'\nimport ProgressBar from './ProgressBar';\nimport styled from \"styled-components\";\nimport {AiFillDelete, AiFillEdit } from \"react-icons/ai\";\n\n\n\nfunction CategoryCard({category, handleRemoveCategory, submitCategoryEdit}){\n    const [isEditClicked, setIsEditClicked] = useState(false)\n    const {name, budget, id} = category;\n    const [categoryName, setCategoryName] = useState(name)\n    const [budgetValue, setBudgetValue] = useState(budget)\n\n    const totalSpent = category.transactions.map(transaction => {\n        return transaction.amount\n    }).reduce(( accumulator, currentValue ) => accumulator + currentValue,\n        0\n      ).toFixed(2)\n\n      const data1 = [\n          {spending: 1, spent: totalSpent}\n      ]\n\n      const data2 = [\n        {\"budgeted\": 1, spent: budget}\n    ]\n\n    const categoryDataObj = (\n        <>\n        \n            <h3>{name}</h3>\n            <ProgressBar budget={budget} totalSpent={totalSpent}/>\n            <h5>Budget: ${budget}</h5>\n            <h5>Total Spent: ${totalSpent}</h5>\n            \n            <DeleteCategoryButton data-id={id} onClick={() => handleRemoveCategory(id)}/>\n            <EditCategoryButton data-id={id} onClick={() => setIsEditClicked(!isEditClicked)} />\n            </>\n    )\n\n    //handle new category form submit\n    function handleSubmit(e){\n        e.preventDefault()\n        \n        submitCategoryEdit({\n            id: id,\n            name: categoryName,\n            budget: parseInt(budgetValue)\n        })\n\n        setIsEditClicked(!isEditClicked)\n\n    }\n\n    // edit category form\n    const categoryEditForm = (\n            <form className=\"edit-category-form\" onSubmit={handleSubmit}>\n                <label> Name:</label>\n                <input\n                    name=\"name\"\n                    value={categoryName}\n                    onChange={(e) => setCategoryName(e.target.value)}\n                />\n                <label> Budget:</label>\n                <input \n                    name=\"budget\"\n                    value = {budgetValue}\n                    onChange={(e) => setBudgetValue(e.target.value)}\n                />\n                <button \n                    type=\"submit\">\n                        submit\n                </button>\n            </form>\n    )\n\n    return( \n        <>\n        {!isEditClicked ? \n            <CategoryCardDiv>\n                {categoryDataObj}\n            </CategoryCardDiv> : \n            <CategoryCardDiv>\n                {categoryEditForm}\n                <button onClick={()=> setIsEditClicked(!isEditClicked)}>Cancel</button>\n            </CategoryCardDiv> }\n        </>\n    )\n}\n\nconst CategoryCardDiv = styled.div`\n    border:1px #ccc solid;\n    width: 20%;\n    border-radius: 5px;\n    text-align:center;\n    background: #f5f5f5;\n    :hover {\n        transform: scale(1.05);\n        box-shadow: 2px 5px black;\n      }\n    `\n\nconst DeleteCategoryButton = styled(AiFillDelete)`\n    cursor: pointer;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    width: 16px;\n    height: 16px;\n    padding: 0;\n    z-index: 10;\n`\n\n\nconst EditCategoryButton = styled(AiFillEdit)`\n    cursor: pointer;\n    z-index: 10;\n    width: 16px;\n    height: 16px;\n    padding: 0;\n    position: absolute;\n    top: 10px;\n    right: 30px;\n\n`\n\nexport default CategoryCard","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/ProfileRelated/MonthComparisonChart.js",["126"],"import React, {useEffect, useState} from \"react\"\nimport { Bar } from 'react-chartjs-2';\n\n\nfunction MonthComparisonChart({allMonths}){\n    const [chartData, setChartData] = useState({})\n\n    // console.log(allMonths)\n\n\n    const monthlyBudget = allMonths.map(month=> {\n        return month.categories.map(category => (category.budget))\n        .reduce(( accumulator, currentValue ) => accumulator + currentValue,0)\n    })\n    \n    // console.log(\"budget\",monthlyBudget)\n\n    const monthlyActuals = allMonths.map(month=> {\n        return month.transactions.map(transaction => transaction.amount)\n        .reduce(( accumulator, currentValue ) => accumulator + currentValue,0)\n    })\n\n    // console.log(\"Actuals\", monthlyActuals)\n    \n    const monthNames = allMonths.map(month=> month.name)\n\n    // console.log(monthNames)\n\n\n    //chart\n\n\n    function chart(){\n        setChartData({\n            labels: monthNames,\n            datasets: [\n                {\n                    data: monthlyActuals,\n                    lineTension: 0.1,\n                    backgroundColor: [\"#9acd32\",\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\", \"#bdffbe\", \"#808000\", \"556b2f\"],\n                    borderColor: [\"#9acd32\",\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\",  \"#bdffbe\", \"#808000\",\"556b2f\" ],\n                    borderCapStyle: \"butt\",\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: \"miter\",\n                    pointBorderColor: \"#2085d8\",\n                    pointBackgroundColor: \"#FFF\",\n  \n                    pointHoverBackgroundColor: \"#2f3640\",\n                    pointHoverBorderColor: \"#2085d8\",\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    label: \"actuals\"\n                },\n                {\n                    data: monthlyBudget,\n                    lineTension: 0.1,\n                    backgroundColor: [\"#0f52ba\", \"#0f52ba\", \"#0f52ba\", \"#0f52ba\"],//,\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\", \"#bdffbe\", \"#808000\", \"556b2f\"],\n                    borderColor: [\"#0f52ba\"],//,\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\",  \"#bdffbe\", \"#808000\",\"556b2f\" ],\n                    borderCapStyle: \"butt\",\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: \"miter\",\n                    pointBorderColor: \"#2085d8\",\n                    pointBackgroundColor: \"#FFF\",\n             \n                    pointHoverBackgroundColor: \"#2f3640\",\n                    pointHoverBorderColor: \"#2085d8\",\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    label: \"budget\"\n                }\n            ]\n        })\n    }\n\n    //scales stacks the chart, if I wanted bar graph made up of different categories\n    let chartOptions = {\n        // scales: {\n        //     xAxes: [{\n        //         stacked: true\n        //     }],\n        //     yAxes: [{\n        //         stacked: true\n        //     }]\n        // }\n    }\n\n\n\n    useEffect(() => {\n        chart()\n    }, [])\n\n\n\n\n    return( \n        <>\n        <h3>MonthComparisonChart</h3>\n        <div className=\"monthly-comparison-chart-div\">\n            <Bar\n                data={chartData}\n                options={chartOptions}\n            />\n        </div>\n\n        </>\n    )\n}\n\n\nexport default MonthComparisonChart;","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/Modal/MonthlyIncomeModal.js",["127","128"],"import React, {useState, useRef, useCallback} from 'react'\nimport styled from \"styled-components\";\nimport { MdClose } from 'react-icons/md';\nimport { useSpring, animated } from 'react-spring';\n\n\n\nfunction Modal({show, onClose, updateMonthBudget}){\n    const [newIncome, setNewIncome] = useState(\"\")\n\n    const animation = useSpring({\n        config: {\n          duration: 250\n        },\n        opacity: show ? 1 : 0,\n        transform: show ? `translateY(0%)` : `translateY(-100%)`\n      });\n\n\n    if (!show){\n        return null\n    }\n\n    function handleSubmit(e){\n        e.preventDefault()\n        updateMonthBudget({budget: newIncome})\n        setNewIncome(\"\")\n        onClose()\n    }\n\n    return(\n        <>\n            <Background onClick={onClose} >\n            <animated.div style={animation}>\n                <ModalWrapper onClick={e => e.stopPropagation()} >\n                    <ModalContent>\n                        <h4 className=\"modal-title\">Enter new monthly income:</h4>\n                        <form onSubmit={handleSubmit} className=\"modal-new-form\">\n                            <input \n                                type=\"number\"\n                                name=\"amount\"\n                                value={newIncome}\n                                onChange={(e) => setNewIncome(e.target.value)}\n                            />\n                            <button  type=\"submit\" className=\"button-modal-close\">\n                                Submit\n                            </button>\n                            \n                        </form>\n                    </ModalContent>\n                    <CloseModalButton\n                        aria-label='Close modal'\n                         onClick={onClose}\n                    />\n                </ModalWrapper>\n                </animated.div>\n            </Background>\n        </>\n\n    )\n}\n\n\nexport default Modal\n\nconst Background = styled.div`\n    position: fixed;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0,0,0,0.8);\n    display: flex;\n    align-items:center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n`\n\nconst ModalWrapper = styled.div`\n    width: 500px;\n    background-color: #bfbfbf;\n    height: 180px;\n    box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\n    color: #000;\n    grid-template-columns: 1fr 1fr;\n    position: relative;\n    z-index: 10;\n    border-radius: 10px;\n    text-align: center;\n`\n//    display: grid;\n\n\nconst ModalContent = styled.div`\n     padding: 10px;\n     border-top: 1px solid #eee;\n     border-bottom: 1px solid #eee;\n     display: inline-block;\n\n\n     button {\n        padding: 10px 21px;\n        background: #141414;\n        color: #fff;\n        border: none;\n        margin-left: 5px;\n      }\n`\n\nconst CloseModalButton = styled(MdClose)`\n  cursor: pointer;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 32px;\n  height: 32px;\n  padding: 0;\n  z-index: 10;\n`;\n\n  \n  ","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Login.js",["129"],"import {createContext, useState} from \"react\";\nimport ReactDOM from \"react-dom\";\n\n\n//global state: loggedIn?\n\n//create context obj\nconst LoginContext = createContext();\n\n//context provider component\nfunction LoginProvider({children}){\n    const [loggedIn, setLoggedIn] = useState(false)\n\n\n    function toggle(){\n        setLoggedIn(loggedIn => !loggedIn)\n    }\n\n\n    const value = {loggedIn: loggedIn, toggle: toggle}\n\n    return (\n        <LoginContext.Provider value={value}>{children}</LoginContext.Provider>\n    );\n}\n\nexport {LoginContext, LoginProvider};\n ","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/Modal/CreateNewMonthModal.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/HomePage/Home.js",["130"],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/ProgressBar.js",["131","132"],"import React from \"react\"\n\n\nfunction ProgressBar({budget, totalSpent}){\n\n\nlet percentage = (totalSpent/budget)*100\n\nlet progressBarColor\nif (percentage > 100){\n     percentage = 100\n     progressBarColor = \"red\"\n} else if(percentage==0){\n    progressBarColor = \"rgb(165, 164, 187)\"\n}else if(percentage==100){\n    progressBarColor = \"#347c17\"\n}else if(percentage >= 90 && percentage < 100){\n    progressBarColor = \"rgb(203, 172, 48)\"\n\n}else {\n    progressBarColor = \"rgb(95, 142, 167)\"\n}\n\nconst myStyle ={\n    width: `${percentage}%`,\n    background: progressBarColor,\n}\n\n\n\nreturn(\n        <div className=\"progress-bar\" >\n                <div \n                    className=\"progress-filler\" \n                    style={myStyle}>\n                </div>\n        </div>\n)\n}\n\nexport default ProgressBar","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/InvestmentMain.js",["133","134","135","136","137"],"import React, {useEffect, useState, useMemo} from \"react\"\nimport ReactDOM from 'react-dom'\nimport CoinCard from \"./CoinCard\"\nimport styled from \"styled-components\";\nimport useColumns from \"./Columns\";\nimport CryptoTable from \"./CryptoTable\";\n\n\nfunction InvestmentMain(){\n\n    const [allCoins, setAllCoins] = useState({})\n    const [coinIndex, setCoinIndex] = useState(0)\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [pageIndex, setPageIndex] = useState(0)\n    const columns = useColumns();\n\n    console.log(columns)\n\n    //pull api data every xx amt of time\n    useEffect(() => {\n        apiCall()\n        const id = setInterval(apiCall, 100000);\n        return () => clearInterval(id);\n        }, [])\n\n    const apiCall = () => {\n        fetch(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd`)\n        .then(response => response.json())\n        .then(data => {\n            setAllCoins(data)\n            setIsLoaded(true)})\n    }\n    \n    if (!isLoaded) return <h2>Loading...</h2>;\n\n    \n    const selectedCoins = allCoins.slice(coinIndex, coinIndex+10)\n    \n    console.log(selectedCoins)\n\n\n    // const coinCardObj = selectedCoins.map((coin, index)=>{\n    //     return <CoinCard key={coin.current_price} coin={coin} order={pageIndex*10+index+1}/>\n    // })\n\n    function pageForward(){\n        setCoinIndex(coinIndex+10);\n         setPageIndex(pageIndex+1)\n    }\n\n    function pageBackward(){\n        setCoinIndex(coinIndex-10);\n         setPageIndex(pageIndex-1)\n    }\n\n    console.log(pageIndex)\n\n    return(\n        <>\n        <div className=\"crypto-cards-div\">\n            <h1>investment page</h1>\n            {/* {coinCardObj} */}\n            <CryptoTable selectedCoins={selectedCoins}/>\n        </div>\n        {pageIndex==0 ? null : <button onClick={() => pageBackward()}>Previous Page</button>}\n        {pageIndex==9? null : <button onClick={() => pageForward()}>Next Page</button>}\n       \n        <BottomDiv>**Data updated every 5 minutes</BottomDiv>\n        </>\n    )\n}\n\nexport default InvestmentMain;\n\nconst BottomDiv = styled.div`\nheight:25px;\npadding: 20px 0;\n\n`\n\n","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/CoinCard.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/Columns.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/CryptoTable.js",["138"],"import React from \"react\";\nimport { useSortBy, useTable } from \"react-table\";\nimport useColumns from \"./Columns\";\nimport \"./Table.css\";\nimport { FaCaretSquareUp, FaCaretSquareDown } from \"react-icons/fa\";\n\nfunction CryptoTable({selectedCoins}){\n    const columns = useColumns();\n    const data= selectedCoins\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow\n      } = useTable({ columns, data }, useSortBy);\n\n      function doNothing(e){\n      console.log(e.target)\n      }\n\n    return( \n        <div className=\"container\">\n            <table {...getTableProps()}>\n                <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                {column.render(\"Header\")}\n                                <span>\n                                    {column.isSorted ? (\n                                    column.isSortedDesc ? (\n                                        <FaCaretSquareDown />\n                                    ) : (\n                                        <FaCaretSquareUp />\n                                    )\n                                    ) : (\n                                    \"\"\n                                    )}\n                                </span>\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {rows.map(row => {\n                        prepareRow(row);\n                        console.log(row)\n                        return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                            return (\n                                <td {...cell.getCellProps()} >{cell.render(\"Cell\")}</td>\n                            );\n                            })}\n                        </tr>\n                        );\n                    })}\n                    </tbody>\n                </table>\n                </div>\n            );\n    \n}\n\n\nexport default CryptoTable","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/NavBar/NavBar.js",["139","140","141","142"],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/NavBar/NavBarData.js",[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":22,"column":40,"nodeType":"149","messageId":"150","endLine":22,"endColumn":42},{"ruleId":"151","severity":1,"message":"152","line":41,"column":8,"nodeType":"153","endLine":41,"endColumn":27,"suggestions":"154"},{"ruleId":"147","severity":1,"message":"148","line":59,"column":63,"nodeType":"149","messageId":"150","endLine":59,"endColumn":65},{"ruleId":"155","severity":1,"message":"156","line":138,"column":5,"nodeType":"157","messageId":"158","endLine":141,"endColumn":29},{"ruleId":"147","severity":1,"message":"148","line":183,"column":83,"nodeType":"149","messageId":"150","endLine":183,"endColumn":85},{"ruleId":"159","severity":1,"message":"160","line":20,"column":13,"nodeType":"161","messageId":"162","endLine":20,"endColumn":18},{"ruleId":"159","severity":1,"message":"163","line":24,"column":13,"nodeType":"161","messageId":"162","endLine":24,"endColumn":18},{"ruleId":"151","severity":1,"message":"152","line":95,"column":8,"nodeType":"153","endLine":95,"endColumn":10,"suggestions":"164"},{"ruleId":"159","severity":1,"message":"165","line":1,"column":26,"nodeType":"161","messageId":"162","endLine":1,"endColumn":32},{"ruleId":"159","severity":1,"message":"166","line":1,"column":34,"nodeType":"161","messageId":"162","endLine":1,"endColumn":45},{"ruleId":"159","severity":1,"message":"167","line":2,"column":8,"nodeType":"161","messageId":"162","endLine":2,"endColumn":16},{"ruleId":"159","severity":1,"message":"167","line":2,"column":8,"nodeType":"161","messageId":"162","endLine":2,"endColumn":16},{"ruleId":"147","severity":1,"message":"148","line":13,"column":21,"nodeType":"149","messageId":"150","endLine":13,"endColumn":23},{"ruleId":"147","severity":1,"message":"148","line":15,"column":20,"nodeType":"149","messageId":"150","endLine":15,"endColumn":22},{"ruleId":"159","severity":1,"message":"168","line":1,"column":37,"nodeType":"161","messageId":"162","endLine":1,"endColumn":44},{"ruleId":"159","severity":1,"message":"167","line":2,"column":8,"nodeType":"161","messageId":"162","endLine":2,"endColumn":16},{"ruleId":"159","severity":1,"message":"169","line":3,"column":8,"nodeType":"161","messageId":"162","endLine":3,"endColumn":16},{"ruleId":"147","severity":1,"message":"148","line":65,"column":19,"nodeType":"149","messageId":"150","endLine":65,"endColumn":21},{"ruleId":"147","severity":1,"message":"148","line":66,"column":19,"nodeType":"149","messageId":"150","endLine":66,"endColumn":21},{"ruleId":"159","severity":1,"message":"170","line":19,"column":16,"nodeType":"161","messageId":"162","endLine":19,"endColumn":25},{"ruleId":"159","severity":1,"message":"171","line":12,"column":12,"nodeType":"161","messageId":"162","endLine":12,"endColumn":20},{"ruleId":"159","severity":1,"message":"172","line":12,"column":22,"nodeType":"161","messageId":"162","endLine":12,"endColumn":28},{"ruleId":"159","severity":1,"message":"173","line":13,"column":11,"nodeType":"161","messageId":"162","endLine":13,"endColumn":18},{"ruleId":"174","severity":1,"message":"175","line":25,"column":17,"nodeType":"176","endLine":25,"endColumn":76},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chart'. Either include it or remove the dependency array.","ArrayExpression",["179"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unused-vars","'data1' is assigned a value but never used.","Identifier","unusedVar","'data2' is assigned a value but never used.",["180"],"'useRef' is defined but never used.","'useCallback' is defined but never used.","'ReactDOM' is defined but never used.","'useMemo' is defined but never used.","'CoinCard' is defined but never used.","'doNothing' is defined but never used.","'loggedIn' is assigned a value but never used.","'toggle' is assigned a value but never used.","'history' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},"Update the dependencies array to be: [chart, selectedMonthData]",{"range":"185","text":"186"},"Update the dependencies array to be: [chart]",{"range":"187","text":"188"},[1524,1543],"[chart, selectedMonthData]",[3262,3264],"[chart]"]