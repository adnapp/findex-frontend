[{"/Users/anapoletano/Flatiron/code/Mod5/findex/src/index.js":"1","/Users/anapoletano/Flatiron/code/Mod5/findex/src/reportWebVitals.js":"2","/Users/anapoletano/Flatiron/code/Mod5/findex/src/App.js":"3","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Footer.js":"4","/Users/anapoletano/Flatiron/code/Mod5/findex/src/MainContainer.js":"5","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/ProfileRelated/Profile.js":"6","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionContainer.js":"7","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionList.js":"8","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/Search.js":"9","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionCard.js":"10","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/MonthGraph.js":"11","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/CategoryContainer.js":"12","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BudgetPage.js":"13","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/CategoryCard.js":"14","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/ProfileRelated/MonthComparisonChart.js":"15","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/Modal/MonthlyIncomeModal.js":"16","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Login.js":"17","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/Modal/CreateNewMonthModal.js":"18","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/HomePage/Home.js":"19","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/ProgressBar.js":"20","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/InvestmentMain.js":"21","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/CoinCard.js":"22","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/Columns.js":"23","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/CryptoTable.js":"24","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/NavBar/NavBar.js":"25","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/NavBar/NavBarData.js":"26"},{"size":587,"mtime":1612380312485,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1612378419870,"results":"29","hashOfConfig":"28"},{"size":420,"mtime":1613588781680,"results":"30","hashOfConfig":"28"},{"size":672,"mtime":1613588858691,"results":"31","hashOfConfig":"28"},{"size":861,"mtime":1613588338544,"results":"32","hashOfConfig":"28"},{"size":2321,"mtime":1613706300297,"results":"33","hashOfConfig":"28"},{"size":2463,"mtime":1613667171720,"results":"34","hashOfConfig":"28"},{"size":1150,"mtime":1613702952965,"results":"35","hashOfConfig":"28"},{"size":464,"mtime":1613702991789,"results":"36","hashOfConfig":"28"},{"size":872,"mtime":1613586491570,"results":"37","hashOfConfig":"28"},{"size":2341,"mtime":1613448757892,"results":"38","hashOfConfig":"28"},{"size":3051,"mtime":1613702755517,"results":"39","hashOfConfig":"28"},{"size":10568,"mtime":1614885407750,"results":"40","hashOfConfig":"28"},{"size":3320,"mtime":1613455637898,"results":"41","hashOfConfig":"28"},{"size":4277,"mtime":1613591963873,"results":"42","hashOfConfig":"28"},{"size":2950,"mtime":1613678783143,"results":"43","hashOfConfig":"28"},{"size":564,"mtime":1613595174787,"results":"44","hashOfConfig":"28"},{"size":5863,"mtime":1613702410100,"results":"45","hashOfConfig":"28"},{"size":2641,"mtime":1615236824959,"results":"46","hashOfConfig":"28"},{"size":1170,"mtime":1613654234444,"results":"47","hashOfConfig":"28"},{"size":2385,"mtime":1615406398273,"results":"48","hashOfConfig":"28"},{"size":1279,"mtime":1615406299283,"results":"49","hashOfConfig":"28"},{"size":1321,"mtime":1615408925897,"results":"50","hashOfConfig":"28"},{"size":2990,"mtime":1615406857601,"results":"51","hashOfConfig":"28"},{"size":3006,"mtime":1613595148666,"results":"52","hashOfConfig":"28"},{"size":714,"mtime":1613448757896,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"7dmnfc",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/anapoletano/Flatiron/code/Mod5/findex/src/index.js",[],["117","118"],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/reportWebVitals.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/App.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Footer.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/MainContainer.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/ProfileRelated/Profile.js",["119","120"],"import React, {useEffect, useState} from \"react\"\nimport MonthComparisonChart from \"./MonthComparisonChart\"\nimport styled from \"styled-components\";\n\n\nfunction Profile(){\n    const [allMonths, setAllMonths]= useState({})\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [userData, setUserData] = useState()\n\n    useEffect(()=> {\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/users/11`)\n        .then(resp => resp.json())\n        .then(data => {\n            setUserData(data)\n            setAllMonths(data.MonthlyBudgets)\n            setIsLoaded(true)\n        })\n    }, [])\n\n    if (!isLoaded) return <h2>Loading...</h2>;\n\n    console.log(allMonths)\n\n    const monthsSimplified = allMonths.map(month=> {\n        let totalSpent\n        {month.transactions[0] ?\n             totalSpent = month.transactions.map(transaction => transaction.amount)\n             .reduce(( accumulator, currentValue ) => accumulator + currentValue,0).toFixed(2)\n        : totalSpent=0}\n        \n        return {\n            name: month.name,\n            budget: month.budget,\n            spent: totalSpent\n        }\n    }).filter(month => month.spent != 0 )\n\n    console.log(monthsSimplified)\n\n    \n    // let's make it so only mapping average/percent from months with transactions\n\n\n\n    let average =  monthsSimplified.map(month=>month.spent).reduce((a, b) => parseInt(a) + parseInt(b))/monthsSimplified.length;\n\n    let percentInBudget = monthsSimplified.map(month=> {\n        return (month.budget > month.spent ?  1 :  0)\n\n    }).reduce((a, b) => parseInt(a) + parseInt(b))/(monthsSimplified.length)*100\n\n    return( \n        <ProfilePageDiv>\n        <h2>{userData.name}'s Profile</h2>\n        <TextBoxDivs>Your average spend per month was ${average}</TextBoxDivs>\n        <TextBoxDivs>Your spending was within your income {percentInBudget.toFixed(1)}% of the time</TextBoxDivs>\n        {/* <p>additional info/ another chart</p> */}\n        <br/><br/>\n        <MonthComparisonChart allMonths={allMonths}/>\n        </ProfilePageDiv>\n    )\n}\n\nconst ProfilePageDiv = styled.div`\n    height: 90vh;\n    text-align:center;\n    display:flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n`\n\nconst TextBoxDivs = styled.div`\nmargin: 7px;\npadding: 7px;\nborder: 1px;\n`\n\n\nexport default Profile;","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionContainer.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionList.js",["121"],"import React, {useState} from 'react'\nimport Search from './Search'\nimport TransactionCard from './TransactionCard'\nimport \"./Transactions.css\"\n\n\nfunction TransactionList({transactions, handleRemoveTransaction, categoriesList}){\n\n    const [selectedCategory, setSelectedCategory] = useState(\"all\")\n\n\n    // console.log(selectedCategory)\n\n    function handleChange(value){\n        setSelectedCategory(value)\n    }\n\n    const filteredTransactions = transactions.filter(transaction =>{\n        if (selectedCategory === \"all\"){\n            return transaction \n        }\n        return transaction.category_id == selectedCategory\n    })\n\n    const transactionsObj = filteredTransactions.map((transaction=> {\n        return <TransactionCard key={transaction.id} transaction={transaction} handleRemoveTransaction={handleRemoveTransaction}/>\n    }))\n\n    console.log(transactions)\n\n    return( \n        <>\n        <div className=\"transaction-list-div\">\n            {transactions[0] ? <Search categoriesList={categoriesList} handleChange={handleChange}/>: null}\n            {transactionsObj}\n        </div>\n        </>\n    )\n}\n\n\nexport default TransactionList","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/Search.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionCard.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/MonthGraph.js",["122"],"import React, { useState, useEffect } from 'react';\nimport {  Doughnut } from \"react-chartjs-2\";\n\n\n\nfunction MonthGraph({selectedMonthData}){\n    const [chartData, setChartData] = useState({})\n    \n    const categoryLabels = selectedMonthData.categories.map(data => data.name)\n    const categoryData = selectedMonthData.categories.map(data => data.budget)\n\n    function chart(){\n        setChartData({\n            labels: categoryLabels,\n            datasets: [\n                {\n                    data: categoryData,\n                    lineTension: 0.1,\n                    backgroundColor: [\"#9acd32\",\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\", \"#bdffbe\", \"#808000\", \"556b2f\"],\n                    borderColor: [\"#9acd32\",\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\",  \"#bdffbe\", \"#808000\",\"556b2f\" ],\n                    borderCapStyle: \"butt\",\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: \"miter\",\n                    pointBorderColor: \"#2085d8\",\n                    pointBackgroundColor: \"#FFF\",\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: \"#2f3640\",\n                    pointHoverBorderColor: \"#2085d8\",\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                }\n            ]\n        })\n    }\n\n    useEffect(() => {\n        chart()\n    }, [selectedMonthData])\n\n    let chartOptions = {\n        responsive: true,\n        title: { text: \"Budget Broken Down into Categories\", \n                display:true, \n                fontSize: 30 \n        },    \n        legend: {\n            position: 'left',\n            labels: {\n                fontSize: 18,\n                padding: 12\n            }\n        },\n        cutoutPercentage: 40,\n        animation: {\n            animateRotate: false,\n            animateScale: true\n          }\n    \n        \n    }\n\n\n    return(\n        <div className=\"doughnut-chart\">\n            <Doughnut\n                data={chartData} \n                options={chartOptions} \n            />\n            \n        </div>\n    );\n}\n\n\nexport default MonthGraph","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/CategoryContainer.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BudgetPage.js",["123","124"],"import React, {useEffect, useState} from 'react'\n// import {useHistory} from 'react-router-dom'\nimport TransactionContainer from './BottomHalfBudgetPage/TransactionContainer'\nimport CreateNewMonthModal from './Modal/CreateNewMonthModal'\nimport Modal from './Modal/MonthlyIncomeModal'\nimport CategoryContainer from './TopHalfBudgetPage/CategoryContainer'\nimport MonthGraph from './TopHalfBudgetPage/MonthGraph'\nimport styled from \"styled-components\";\nimport './BudgetPage.css'\nimport * as BiIcons from \"react-icons/bi\";\n\n\nfunction BudgetPage(){\n    const [showMIModal, setShowMIModal] = useState(false)\n    const [createMonthModal, setCreateMonthModal] = useState(false)\n    const [allMonths, setAllMonths]= useState({})\n    const [selectedMonthNumber, setSelectedMonthNumber] = useState(44) /// let's auto select this\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [transactions, setTransactions] = useState([]) //used to refresh page\n    \n    //look @ time.now to set initial date on page load\n    \n    //initial load\n    useEffect(()=> {\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/monthly_budgets`)\n        .then(resp => resp.json())\n        .then(data => {\n            setAllMonths(data)\n            setIsLoaded(true)\n        })\n    }, [transactions, selectedMonthNumber, selectedMonthNumber])\n    \n    if (!isLoaded) return <h2>Loading...</h2>;\n    \n    const existingMonthNums = allMonths.map(month => month.id ).sort()\n//    console.log(existingMonthNums.sort())\n\n    function submitTransaction(formData){\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/transactions`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formData),\n        })\n        .then(response => response.json())\n        .then(data => {\n            setTransactions(data);\n        })\n    }\n    \n    function handleRemoveTransaction(id){\n        console.log(id)\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/transactions/${id}`, {\n            method: \"DELETE\"\n        })\n        .then(response => response.json())\n        .then(data => setTransactions(data))\n    }\n    \n    const selectedMonthData = allMonths.find(month=>(month.id == selectedMonthNumber))\n    \n    function handleRemoveCategory(id){\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/categories/${id}`, {\n            method: \"DELETE\"\n            })\n            .then(response => response.json())\n            .then(data => setTransactions(data))\n    }\n\n    function handleRemoveMonth(){\n        console.log(selectedMonthNumber)\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/monthly_budgets/${selectedMonthNumber}`, {\n            method: \"DELETE\"\n            })\n            .then(response => response.json())\n            .then(setSelectedMonthNumber(44))\n    }\nconsole.log(selectedMonthNumber)\n\n    function createCategory(formData){\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/categories`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formData),\n          })\n          .then(response => response.json())\n          .then(data => {\n            setTransactions(data);\n          })\n    }\n\n    function submitCategoryEdit(data){\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/categories/${data.id}`, {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n          })\n          .then(response => response.json())\n          .then(data => setTransactions(data))\n    }\n\n    function updateMonthBudget(data){\n        console.log(data)\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/monthly_budgets/${selectedMonthNumber}`, {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n          })\n          .then(response => response.json())\n          .then(data=> setTransactions(data))\n    }\n\n    function monthForward(){\n        //    if( existingMonthNums.indexOf(selectedMonthNumber+1)>-1 ){\n        //     setSelectedMonthNumber((selectedMonthNumber+1))\n        // }\n        setSelectedMonthNumber(existingMonthNums[indexOfSelectedMonth+1])\n    }\n\n    function monthBack(){\n        // if(existingMonthNums.indexOf(selectedMonthNumber)){\n        //     setSelectedMonthNumber((selectedMonthNumber-1))\n        // }\n        setSelectedMonthNumber(existingMonthNums[indexOfSelectedMonth-1])\n\n    }\n    \n    let totalBudget=0\n    let totalSpent=0\n    //sum up total budget\n    // if (selectedMonthData){\n     totalBudget = selectedMonthData.categories.map(category => (category.budget))\n    .reduce(( accumulator, currentValue ) => accumulator + currentValue,0).toFixed(2)\n\n    //sums up total spent\n     totalSpent = selectedMonthData.transactions.map(transaction => transaction.amount)\n    .reduce(( accumulator, currentValue ) => accumulator + currentValue,0).toFixed(2)\n// }\n\n    //maybe utilize other Progress Bar\n    let percentageSpent = (totalSpent / selectedMonthData.budget)*100\n    const mainProgressBarStyle ={\n       \n        width: `${percentageSpent}%`,\n        background: \"#00468c\",\n    }\n\n    //used to not enable this variable unless there is data-- refactor?\n    let biggestTransaction = 0\n    {selectedMonthData.transactions[0] ?\n         biggestTransaction = selectedMonthData.transactions.reduce(\n        (accumulator,obj) => (obj.amount > accumulator.amount ? obj : accumulator))\n    :  biggestTransaction=0}\n\n    let indexOfSelectedMonth = (existingMonthNums.indexOf(selectedMonthNumber))\n    console.log(selectedMonthData)\n    return( \n        <div className=\"budget-page-div\">\n            <div className=\"month-change-buttons-div\">\n                {existingMonthNums[indexOfSelectedMonth-1] ? <h1 onClick={monthBack} className=\"month-back\">  <BiIcons.BiLeftArrow/>  </h1>: null}\n                <h2>{selectedMonthData.name}</h2>\n                {existingMonthNums[indexOfSelectedMonth+1] ? <h1 onClick={monthForward} className=\"month-forward\"> <BiIcons.BiRightArrow/> </h1>: null}\n            </div>\n            \n            <ProgressBarDiv>\n                    <ProgressBarFillerDiv style={mainProgressBarStyle} ></ProgressBarFillerDiv>\n                    <br></br>\n                    <ProgressBarLabels>\n                        <div>Spent: ${totalSpent}</div>\n                        <div>Income ${selectedMonthData.budget}</div>\n                        <button className=\"edit-monthly-income-button\" onClick={() => setShowMIModal(true)}>Adjust</button>\n                    </ProgressBarLabels>\n            </ProgressBarDiv>\n           <div style={{height: \"40px\"}}></div> {/* used to move chart lower  */}\n            <br></br>\n\n            <Modal \n                show={showMIModal} \n                onClose={() => setShowMIModal(false)}\n                updateMonthBudget={updateMonthBudget}\n            />\n            <CreateNewMonthModal \n                show={createMonthModal}\n                onClose={() => setCreateMonthModal(false)}\n                setSelectedMonthNumber = {setSelectedMonthNumber}\n                setIsLoaded = {setIsLoaded}\n            \n            />\n\n            <div className=\"top-half-budget-page\">\n            \n                <div className=\"text-and-chart-budget-page\">\n                    {selectedMonthData.categories[0] ? //only display text if transacitons exist\n                        <div className=\"top-half-budget-page-text\">\n                                {totalBudget > selectedMonthData.budget ? \n                                    <p> You have budgeted ${totalBudget}. Your budget is higher than your income this month</p> \n                                    : <p>You have budgeted ${totalBudget} for this month.</p>\n                                }\n                                {selectedMonthData.transactions[0] ?\n                                    <p>Your highest spend item this month was <strong>{biggestTransaction.name}</strong> where you spent <strong>${biggestTransaction.amount.toFixed(2)}</strong>.</p>\n                            : null }\n                                    {/* <p> and your highest spend category was :</p> */}\n                        </div>\n                    : <div className=\"top-half-budget-page-text\">\n                        <p>You have not imported any transactions for this month yet</p>\n                    </div>\n                }\n                    <div className='bar-chart-div'>\n                        {selectedMonthData.categories[0]? (\n                        <MonthGraph selectedMonthData={selectedMonthData}/> \n                        ) : (\n                        <div className=\"no-categories-div\">\n                            <h3>You don't have a budget for this month!</h3>\n                            <h3>Create some categories below to begin building a budget</h3></div>)}\n                    </div>\n                </div>\n                <CategoryContainer \n                    selectedMonthData={selectedMonthData} \n                    createCategory={createCategory} \n                    handleRemoveCategory={handleRemoveCategory}\n                    submitCategoryEdit={submitCategoryEdit}\n                />\n            </div>\n\n            {selectedMonthData.categories[0] ? \n                <div className=\"bottom-half-budget-page\">\n                    <TransactionContainer selectedMonthData={selectedMonthData} submitTransaction={submitTransaction} handleRemoveTransaction={handleRemoveTransaction}/>\n                </div>\n            : null}\n            <button onClick={handleRemoveMonth}>Delete Month</button>\n\n            <AddNewMonthDiv>\n                {!existingMonthNums[indexOfSelectedMonth+1] ? <button onClick={() => setCreateMonthModal(true)}>Create New Month</button> : null}\n            </AddNewMonthDiv>   \n        </div>\n    )\n}\n\nconst ProgressBarDiv = styled.div`\n    height: 8px;\n    border-radius: 5px;\n    width: 88%;\n    margin: 0 auto;\n    background: rgb(165, 164, 187);\n    border:1px #ccc solid;\n    z-index: 0;\n`\n\nconst ProgressBarFillerDiv = styled.div`\n    height: 100%;\n    border-radius: 5px;\n    transition: width .2s ease-in;\n`\n\n\nconst ProgressBarLabels = styled.div`\n    //  width: 88%;\n    display: flex;\n    justify-content: space-between;\n`\nconst AddNewMonthDiv = styled.div`\n    position: absolute;\n    top: 100px;\n    right: 120px;\n`\n\n\n\n\n\nexport default BudgetPage","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/CategoryCard.js",["125","126"],"import React, {useState} from 'react'\nimport ProgressBar from './ProgressBar';\nimport styled from \"styled-components\";\nimport {AiFillDelete, AiFillEdit } from \"react-icons/ai\";\n\n\n\nfunction CategoryCard({category, handleRemoveCategory, submitCategoryEdit}){\n    const [isEditClicked, setIsEditClicked] = useState(false)\n    const {name, budget, id} = category;\n    const [categoryName, setCategoryName] = useState(name)\n    const [budgetValue, setBudgetValue] = useState(budget)\n\n    const totalSpent = category.transactions.map(transaction => {\n        return transaction.amount\n    }).reduce(( accumulator, currentValue ) => accumulator + currentValue,\n        0\n      ).toFixed(2)\n\n      const data1 = [\n          {spending: 1, spent: totalSpent}\n      ]\n\n      const data2 = [\n        {\"budgeted\": 1, spent: budget}\n    ]\n\n    const categoryDataObj = (\n        <>\n        \n            <h3>{name}</h3>\n            <ProgressBar budget={budget} totalSpent={totalSpent}/>\n            <h5>Budget: ${budget}</h5>\n            <h5>Total Spent: ${totalSpent}</h5>\n            \n            <DeleteCategoryButton data-id={id} onClick={() => handleRemoveCategory(id)}/>\n            <EditCategoryButton data-id={id} onClick={() => setIsEditClicked(!isEditClicked)} />\n            </>\n    )\n\n    //handle new category form submit\n    function handleSubmit(e){\n        e.preventDefault()\n        \n        submitCategoryEdit({\n            id: id,\n            name: categoryName,\n            budget: parseInt(budgetValue)\n        })\n\n        setIsEditClicked(!isEditClicked)\n\n    }\n\n    // edit category form\n    const categoryEditForm = (\n            <form className=\"edit-category-form\" onSubmit={handleSubmit}>\n                <label> Name:</label>\n                <input\n                    name=\"name\"\n                    value={categoryName}\n                    onChange={(e) => setCategoryName(e.target.value)}\n                />\n                <label> Budget:</label>\n                <input \n                    name=\"budget\"\n                    value = {budgetValue}\n                    onChange={(e) => setBudgetValue(e.target.value)}\n                />\n                <button \n                    type=\"submit\">\n                        submit\n                </button>\n            </form>\n    )\n\n    return( \n        <>\n        {!isEditClicked ? \n            <CategoryCardDiv>\n                {categoryDataObj}\n            </CategoryCardDiv> : \n            <CategoryCardDiv>\n                {categoryEditForm}\n                <button onClick={()=> setIsEditClicked(!isEditClicked)}>Cancel</button>\n            </CategoryCardDiv> }\n        </>\n    )\n}\n\nconst CategoryCardDiv = styled.div`\n    border:1px #ccc solid;\n    width: 20%;\n    border-radius: 5px;\n    text-align:center;\n    background: #f5f5f5;\n    :hover {\n        transform: scale(1.05);\n        box-shadow: 2px 5px black;\n      }\n    `\n\nconst DeleteCategoryButton = styled(AiFillDelete)`\n    cursor: pointer;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    width: 16px;\n    height: 16px;\n    padding: 0;\n    z-index: 10;\n`\n\n\nconst EditCategoryButton = styled(AiFillEdit)`\n    cursor: pointer;\n    z-index: 10;\n    width: 16px;\n    height: 16px;\n    padding: 0;\n    position: absolute;\n    top: 10px;\n    right: 30px;\n\n`\n\nexport default CategoryCard","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/ProfileRelated/MonthComparisonChart.js",["127"],"import React, {useEffect, useState} from \"react\"\nimport { Bar } from 'react-chartjs-2';\nimport styled from \"styled-components\";\n\n\nfunction MonthComparisonChart({allMonths}){\n    const [chartData, setChartData] = useState({})\n\n\n    const allMonthsSorted = allMonths.sort((a, b) => a.id > b.id ? 1 : -1)\n\n    console.log(allMonthsSorted)\n    const monthlyBudget = allMonthsSorted.map(month=> month.budget)\n    //use below if want to sum up all category budgets\n    // const monthlyBudget = allMonthsSorted.map(month=> {\n    //     return month.categories.map(category => (category.budget))\n    //     .reduce(( accumulator, currentValue ) => accumulator + currentValue,0)\n    // })\n   \n    const monthlyActuals = allMonthsSorted.map(month=> {\n        return month.transactions.map(transaction => transaction.amount)\n        .reduce(( accumulator, currentValue ) => accumulator + currentValue,0)\n    })\n\n    \n    const monthNames = allMonths.map(month=> month.name)\n\n   \n    function chart(){\n        setChartData({\n            labels: monthNames,\n            datasets: [\n                {\n                    data: monthlyActuals,\n                    lineTension: 0.1,\n                    backgroundColor: [\"#3cb371\",\"#3cb371\", \"#3cb371\", \"#3cb371\",\"#3cb371\",\"#3cb371\", \"#3cb371\", \"#3cb371\", \"#3cb371\", \"3cb371\"],\n                    borderColor: [\"#3cb371\"],\n                    borderCapStyle: \"butt\",\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: \"miter\",\n                    pointBorderColor: \"#2085d8\",\n                    pointBackgroundColor: \"#FFF\",\n  \n                    pointHoverBackgroundColor: \"#2f3640\",\n                    pointHoverBorderColor: \"#2085d8\",\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    label: \"Actual Spend ($)\"\n                },\n                {\n                    data: monthlyBudget,\n                    lineTension: 0.1,\n                    backgroundColor: [\"#0f52ba\", \"#0f52ba\", \"#0f52ba\", \"#0f52ba\",\"#0f52ba\", \"#0f52ba\", \"#0f52ba\",\"#0f52ba\",\"#0f52ba\", \"#3cb371\", \"#0f52ba\", \"#0f52ba\", \"556b2f\"],\n                    borderColor: [\"#0f52ba\"],//,\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\",  \"#bdffbe\", \"#808000\",\"556b2f\" ],\n                    borderCapStyle: \"butt\",\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: \"miter\",\n                    pointBorderColor: \"#2085d8\",\n                    pointBackgroundColor: \"#FFF\",\n             \n                    pointHoverBackgroundColor: \"#2f3640\",\n                    pointHoverBorderColor: \"#2085d8\",\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    label: \"Income ($)\"\n                }\n            ]\n        })\n    }\n\n    //scales stacks the chart, if I wanted bar graph made up of different categories\n    let chartOptions = {\n        responsive: true,\n        title: { text: \"Income vs. Actual Spending per Month\", \n                display:true, \n                fontSize: 38,\n                fontColor: \"#FFFFFF\"\n        },    \n        legend: {\n            position: 'left',\n            labels: {\n                fontSize: 18,\n                padding: 12,\n                fontColor: \"#FFFFFF\"\n            }\n        },\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero:true,\n                    fontColor: 'white'\n                },\n            }],\n          xAxes: [{\n                ticks: {\n                    fontColor: 'white'\n                },\n            }]\n        } ,\n        cutoutPercentage: 40,\n        animation: {\n            animateRotate: false,\n            animateScale: true\n          }\n    }\n\n    useEffect(() => {\n        chart()\n    }, [])\n\n\n    return( \n        <>\n        <BarChartDiv>\n            <Bar\n                data={chartData}\n                options={chartOptions}\n            />\n        </BarChartDiv>\n\n        </>\n    )\n}\n\nconst BarChartDiv = styled.div`\n    position: relative;\n    height:30vh; \n    width:60vw\n\n`\n\n\nexport default MonthComparisonChart;","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/Modal/MonthlyIncomeModal.js",["128","129"],"import React, {useState, useRef, useCallback} from 'react'\nimport styled from \"styled-components\";\nimport { MdClose } from 'react-icons/md';\nimport { useSpring, animated } from 'react-spring';\n\n\n\nfunction Modal({show, onClose, updateMonthBudget}){\n    const [newIncome, setNewIncome] = useState(\"\")\n\n    const animation = useSpring({\n        config: {\n          duration: 250\n        },\n        opacity: show ? 1 : 0,\n        transform: show ? `translateY(0%)` : `translateY(-100%)`\n      });\n\n\n    if (!show){\n        return null\n    }\n\n    function handleSubmit(e){\n        e.preventDefault()\n        updateMonthBudget({budget: newIncome})\n        setNewIncome(\"\")\n        onClose()\n    }\n\n    return(\n        <>\n            <Background onClick={onClose} >\n            <animated.div style={animation}>\n                <ModalWrapper onClick={e => e.stopPropagation()} >\n                    <ModalContent>\n                        <h3 className=\"modal-title\">Enter new monthly income:</h3>\n                        <form onSubmit={handleSubmit} className=\"modal-new-form\">\n                            <input \n                                type=\"number\"\n                                name=\"amount\"\n                                value={newIncome}\n                                onChange={(e) => setNewIncome(e.target.value)}\n                            />\n                            <button  type=\"submit\" className=\"button-modal-close\">\n                                Submit\n                            </button>\n                            \n                        </form>\n                    </ModalContent>\n                    <CloseModalButton\n                        aria-label='Close modal'\n                         onClick={onClose}\n                    />\n                </ModalWrapper>\n                </animated.div>\n            </Background>\n        </>\n\n    )\n}\n\n\nexport default Modal\n\nconst Background = styled.div`\n    position: fixed;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0,0,0,0.8);\n    display: flex;\n    align-items:center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n`\n\nconst ModalWrapper = styled.div`\n    width: 500px;\n    background-color: #bfbfbf;\n    height: 180px;\n    box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\n    color: #000;\n    grid-template-columns: 1fr 1fr;\n    position: relative;\n    z-index: 10;\n    border-radius: 10px;\n    text-align: center;\n`\n//    display: grid;\n\n\nconst ModalContent = styled.div`\n     padding: 10px;\n     border-top: 1px solid #eee;\n     border-bottom: 1px solid #eee;\n     display: inline-block;\n     button {\n        padding: 10px 21px;\n        background: #141414;\n        color: #fff;\n        border: none;\n        margin-left: 5px;\n      }\n`\n\nconst CloseModalButton = styled(MdClose)`\n  cursor: pointer;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 32px;\n  height: 32px;\n  padding: 0;\n  z-index: 10;\n`;\n\n  \n  ","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Login.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/Modal/CreateNewMonthModal.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/HomePage/Home.js",["130","131"],"import React from \"react\"\nimport ReactDOM from 'react-dom'\nimport {Link} from \"react-router-dom\";\n\nimport Logo from '../images/findexTopLogo.png';\nimport './Home.css'\nimport styled from 'styled-components'\nimport tulumImage from '../images/Tulum.jpg'\n\n// import { \n//     VictoryBar, \n//     VictoryChart, \n//     VictoryGroup, \n//     VictoryLegend } from 'victory';\n\nfunction Home(){\n\n\n\n\n\n    return(\n        <div>\n\n        <div className=\"home-page-logo-wrapper\" style={{background: '#060b26'}}>\n            <img src={Logo} alt=\"findex logo\" className=\"home-page-logo\"/>\n        </div>\n\n\n        <HomeDiv>\n\n            <HomeTextObjects> At findex, we believe that taking control of your finances is an important part of budgeting\n                <br/><br/> What does financial freedom mean to you?\n            </HomeTextObjects>\n            <TulumImage src={tulumImage}></TulumImage>\n            <div className=\"below-image-text\">\n                <HomeTextObjects>\n                    <div className='bulleted-list-div'>\n                        <strong>How do you define financial stability?</strong>\n                        <ul>\n                            <li>Purchasing a beach front home?</li>\n                            <li>Buying your first home?</li>\n                            <li>Having enough money to comfortably retire at 50?</li>\n                            <li>Buying a lambo?</li>\n                        \n                        </ul>\n                    </div>\n                    <div className=\"right-bulleted-list-div\">\n                        Do you know how you're going reach these goals? \n                    </div>\n\n                </HomeTextObjects>\n            </div>\n                <HomeTextObjects><strong><u>According to US Bank, only 41% of Americans have a budget</u></strong></HomeTextObjects>\n                <HomeTextObjects>\n                    <BottomPageDiv>\n                        Once you become aware of your spending habits, it becomes much easier to budget\n                        <br/><br/>\n                        At <strong>Findex</strong>, it is our mission to help visualize your spending habits, and simplify budget creation\n                    </BottomPageDiv>\n                </HomeTextObjects>\n        </HomeDiv>\n\n\n        </div>\n    )\n}\n\nconst HomeDiv = styled.div`\ntext-align: center;\n`\n\nconst HomeTextObjects = styled.div`\nfont-size: 34px;\nmargin: 20px;\npadding:40px;\nwidth: 100vw;\ndisplay: flex;\njustify-content: center;\n`\n\nconst TulumImage = styled.img`\nwidth: 100vw;\nheight: 100vh;\n`\n\nconst BottomPageDiv = styled.div`\nheight: 25vh;\ntext-size: medium;\n`\n\n\nexport default Home;","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/ProgressBar.js",["132","133"],"import React from \"react\"\nimport styled from \"styled-components\"\n\nfunction ProgressBar({budget, totalSpent}){\n\n\nlet percentage = (totalSpent/budget)*100\n\nlet progressBarColor\nif (percentage > 100){\n     percentage = 100\n     progressBarColor = \"red\"\n} else if(percentage==0){\n    progressBarColor = \"rgb(165, 164, 187)\"\n}else if(percentage==100){\n    progressBarColor = \"#347c17\"\n}else if(percentage >= 90 && percentage < 100){\n    progressBarColor = \"rgb(203, 172, 48)\"\n\n}else {\n    progressBarColor = \"rgb(95, 142, 167)\"\n}\n\nconst myStyle ={\n    width: `${percentage}%`,\n    background: progressBarColor,\n    zIndex: 100\n}\n\n\n// console.log(myStyle)\n\nreturn(\n        <ProgressBarDiv >\n                <ProgressBarFillerDiv \n                    style={myStyle}>\n                </ProgressBarFillerDiv>\n         </ProgressBarDiv>\n)\n}\n\nconst ProgressBarDiv = styled.div`\n// position: relative;\n\nheight: 8px;\nborder-radius: 5px;\nwidth: 88%;\nmargin: 0 auto;\nbackground: rgb(165, 164, 187);\nborder:1px #ccc solid;\nz-index: 0;\n`\n\n\nconst ProgressBarFillerDiv = styled.div`\n    height: 100%;\n    border-radius: 5px;\n    transition: width .2s ease-in;\n`\nexport default ProgressBar","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/InvestmentMain.js",["134","135","136","137"],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/CoinCard.js",["138"],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/Columns.js",["139"],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/InvestmentRelated/CryptoTable.js",["140","141","142"],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/NavBar/NavBar.js",["143"],"import React, { useState} from \"react\";\nimport {Link} from \"react-router-dom\";\n// import { LoginContext } from \"../../Login\";\nimport * as FaIcons from \"react-icons/fa\";\nimport * as AiIcons from \"react-icons/ai\";\nimport {IconContext} from 'react-icons';\nimport {NavBarData} from './NavBarData';\nimport Logo from '../images/findexLargerLogo.png';\nimport './NavBar.css';\n\nfunction NavBar(){\n    // const {loggedIn, toggle} = useContext(LoginContext)\n    // const history = useHistory()\n    const [navBar, setNavBar] = useState(false)\n\n    const showNavBar = () => setNavBar(!navBar);\n    return (\n        <>\n        <IconContext.Provider value={{color:'fff'}}>\n            <div className=\"navBar\">\n                <Link to=\"#\" className='menu-bars'>\n                    <FaIcons.FaBars onClick={showNavBar}/> \n                </Link>\n                <Link exact to=\"/\">\n                    <img src={Logo} alt=\"top-image\" className=\"top-title\" width=\"200\" height = \"60\"/>\n                </Link>\n\n            </div>\n            <nav className={navBar ? \"nav-menu active\" : \"nav-menu\"}>\n                <ul className='nav-menu-items' onClick={showNavBar}>\n                    <li className=\"navBar-toggle\">\n                        <Link to='#' className='menu-bars'>\n                            <AiIcons.AiOutlineClose />\n                        </Link>\n                    </li>\n                    {NavBarData.map((item, index) => {\n                        return (\n                            <li key={index} className={item.cName}>\n                                <Link to={item.path}>\n                                    {item.icon}\n                                    <span>{item.title}</span>\n                                </Link>\n                            </li>\n                        )\n                    })}\n                </ul>\n           \n            </nav>\n        </IconContext.Provider>\n\n        </>\n    )\n\n\n    // const headerLinksObj = () => {\n    //    return(\n    //    <>\n    //     <li>\n    //         <NavLink exact to=\"/budget\">\n    //             <strong>BUDGETS</strong>\n    //         </NavLink>\n    //     </li>\n    //     <li>\n    //         <NavLink exact to=\"/profile\">\n    //             <strong>PROFILE</strong>\n    //         </NavLink>\n    //     </li>\n    //     <li>\n    //         <NavLink exact to=\"/investments\">\n    //             <strong>INVESTMENTS</strong>\n    //         </NavLink>\n    //     </li>\n    //     </>)\n    // }\n\n    // return(\n    //     <nav className=\"nav-bar\"> \n    //     <ul>\n    //         <li>\n    //             <NavLink exact to=\"/\">\n    //                 <strong>HOME</strong>\n    //             </NavLink>\n    //         </li>\n            \n    //         {loggedIn ? headerLinksObj() : history.push(`/`)}         \n\n    //         <li className=\"login\" onClick={toggle}>\n    //             {loggedIn ? \"LOGOUT\" : \"LOGIN\"}\n    //         </li>\n            \n    //     </ul>\n        \n    //     </nav>\n    // )\n}\n\nexport default NavBar;","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/NavBar/NavBarData.js",[],{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":27,"column":9,"nodeType":"150","messageId":"151","endLine":30,"endColumn":24},{"ruleId":"152","severity":1,"message":"153","line":37,"column":36,"nodeType":"154","messageId":"155","endLine":37,"endColumn":38},{"ruleId":"152","severity":1,"message":"156","line":22,"column":40,"nodeType":"154","messageId":"155","endLine":22,"endColumn":42},{"ruleId":"157","severity":1,"message":"158","line":41,"column":8,"nodeType":"159","endLine":41,"endColumn":27,"suggestions":"160"},{"ruleId":"152","severity":1,"message":"156","line":61,"column":63,"nodeType":"154","messageId":"155","endLine":61,"endColumn":65},{"ruleId":"148","severity":1,"message":"149","line":157,"column":5,"nodeType":"150","messageId":"151","endLine":160,"endColumn":29},{"ruleId":"161","severity":1,"message":"162","line":20,"column":13,"nodeType":"163","messageId":"164","endLine":20,"endColumn":18},{"ruleId":"161","severity":1,"message":"165","line":24,"column":13,"nodeType":"163","messageId":"164","endLine":24,"endColumn":18},{"ruleId":"157","severity":1,"message":"158","line":113,"column":8,"nodeType":"159","endLine":113,"endColumn":10,"suggestions":"166"},{"ruleId":"161","severity":1,"message":"167","line":1,"column":26,"nodeType":"163","messageId":"164","endLine":1,"endColumn":32},{"ruleId":"161","severity":1,"message":"168","line":1,"column":34,"nodeType":"163","messageId":"164","endLine":1,"endColumn":45},{"ruleId":"161","severity":1,"message":"169","line":2,"column":8,"nodeType":"163","messageId":"164","endLine":2,"endColumn":16},{"ruleId":"161","severity":1,"message":"170","line":3,"column":9,"nodeType":"163","messageId":"164","endLine":3,"endColumn":13},{"ruleId":"152","severity":1,"message":"156","line":13,"column":21,"nodeType":"154","messageId":"155","endLine":13,"endColumn":23},{"ruleId":"152","severity":1,"message":"156","line":15,"column":20,"nodeType":"154","messageId":"155","endLine":15,"endColumn":22},{"ruleId":"161","severity":1,"message":"171","line":1,"column":37,"nodeType":"163","messageId":"164","endLine":1,"endColumn":44},{"ruleId":"161","severity":1,"message":"169","line":2,"column":8,"nodeType":"163","messageId":"164","endLine":2,"endColumn":16},{"ruleId":"161","severity":1,"message":"172","line":15,"column":11,"nodeType":"163","messageId":"164","endLine":15,"endColumn":18},{"ruleId":"161","severity":1,"message":"173","line":42,"column":11,"nodeType":"163","messageId":"164","endLine":42,"endColumn":22},{"ruleId":"174","severity":1,"message":"175","line":30,"column":13,"nodeType":"176","endLine":34,"endColumn":27},{"ruleId":"174","severity":1,"message":"175","line":16,"column":14,"nodeType":"176","endLine":16,"endColumn":53},{"ruleId":"161","severity":1,"message":"177","line":22,"column":16,"nodeType":"163","messageId":"164","endLine":22,"endColumn":25},{"ruleId":"152","severity":1,"message":"156","line":71,"column":27,"nodeType":"154","messageId":"155","endLine":71,"endColumn":29},{"ruleId":"152","severity":1,"message":"156","line":72,"column":27,"nodeType":"154","messageId":"155","endLine":72,"endColumn":29},{"ruleId":"174","severity":1,"message":"175","line":25,"column":21,"nodeType":"176","endLine":25,"endColumn":102},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chart'. Either include it or remove the dependency array.","ArrayExpression",["180"],"no-unused-vars","'data1' is assigned a value but never used.","Identifier","unusedVar","'data2' is assigned a value but never used.",["181"],"'useRef' is defined but never used.","'useCallback' is defined but never used.","'ReactDOM' is defined but never used.","'Link' is defined but never used.","'useMemo' is defined but never used.","'columns' is assigned a value but never used.","'coinCardObj' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'doNothing' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},"Update the dependencies array to be: [chart, selectedMonthData]",{"range":"186","text":"187"},"Update the dependencies array to be: [chart]",{"range":"188","text":"189"},[1524,1543],"[chart, selectedMonthData]",[3946,3948],"[chart]"]