[{"/Users/anapoletano/Flatiron/code/Mod5/findex/src/index.js":"1","/Users/anapoletano/Flatiron/code/Mod5/findex/src/reportWebVitals.js":"2","/Users/anapoletano/Flatiron/code/Mod5/findex/src/App.js":"3","/Users/anapoletano/Flatiron/code/Mod5/findex/src/NavBar.js":"4","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Footer.js":"5","/Users/anapoletano/Flatiron/code/Mod5/findex/src/MainContainer.js":"6","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/ProfileRelated/Profile.js":"7","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionContainer.js":"8","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionList.js":"9","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/Search.js":"10","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionCard.js":"11","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/MonthGraph.js":"12","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/CategoryContainer.js":"13","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BudgetPage.js":"14","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/CategoryCard.js":"15","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/ProfileRelated/MonthComparisonChart.js":"16","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/Modal/MonthlyIncomeModal.js":"17","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Login.js":"18","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/Modal/CreateNewMonthModal.js":"19","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/HomePage/Home.js":"20","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/ProgressBar.js":"21"},{"size":587,"mtime":1612380312485,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1612378419870,"results":"24","hashOfConfig":"23"},{"size":404,"mtime":1612904996690,"results":"25","hashOfConfig":"23"},{"size":1086,"mtime":1613405623169,"results":"26","hashOfConfig":"23"},{"size":116,"mtime":1612379400993,"results":"27","hashOfConfig":"23"},{"size":647,"mtime":1613405623166,"results":"28","hashOfConfig":"23"},{"size":696,"mtime":1612880419540,"results":"29","hashOfConfig":"23"},{"size":2167,"mtime":1613405623140,"results":"30","hashOfConfig":"23"},{"size":1114,"mtime":1612984801279,"results":"31","hashOfConfig":"23"},{"size":493,"mtime":1612979101007,"results":"32","hashOfConfig":"23"},{"size":578,"mtime":1612818899649,"results":"33","hashOfConfig":"23"},{"size":2268,"mtime":1613405623153,"results":"34","hashOfConfig":"23"},{"size":2413,"mtime":1613405623149,"results":"35","hashOfConfig":"23"},{"size":7474,"mtime":1613405623144,"results":"36","hashOfConfig":"23"},{"size":2679,"mtime":1613405623146,"results":"37","hashOfConfig":"23"},{"size":3553,"mtime":1613405623163,"results":"38","hashOfConfig":"23"},{"size":1689,"mtime":1612904517808,"results":"39","hashOfConfig":"23"},{"size":561,"mtime":1612905207248,"results":"40","hashOfConfig":"23"},{"size":4150,"mtime":1612985784855,"results":"41","hashOfConfig":"23"},{"size":1643,"mtime":1613405623159,"results":"42","hashOfConfig":"23"},{"size":804,"mtime":1613405623156,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"7dmnfc",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"46"},"/Users/anapoletano/Flatiron/code/Mod5/findex/src/index.js",[],["96","97"],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/reportWebVitals.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/App.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/NavBar.js",["98"],"import React, {useContext, useState} from \"react\"\nimport {NavLink, useHistory} from \"react-router-dom\"\nimport { LoginContext } from \"./Login\"\n\nfunction NavBar(){\n    const {loggedIn, toggle} = useContext(LoginContext)\n    const history = useHistory()\n\n    const headerLinksObj = () =>Â {\n       return(\n       <>\n        <li>\n            <NavLink exact to=\"/budget\">\n                <strong>BUDGETS</strong>\n            </NavLink>\n        </li>\n        <li>\n            <NavLink exact to=\"/profile\">\n                <strong>PROFILE</strong>\n            </NavLink>\n        </li>\n        <li>\n            <NavLink exact to=\"/investments\">\n                <strong>INVESTMENTS</strong>\n            </NavLink>\n        </li>\n        </>)\n    }\n\n    return(\n        <nav className=\"nav-bar\"> \n        <ul>\n            <li>\n                <NavLink exact to=\"/\">\n                    <strong>HOME</strong>\n                </NavLink>\n            </li>\n            \n            {loggedIn ? headerLinksObj() : history.push(`/`)}         \n\n            <li className=\"login\" onClick={toggle}>\n                {loggedIn ? \"LOGOUT\" : \"LOGIN\"}\n            </li>\n            \n        </ul>\n        \n        </nav>\n    )\n}\n\nexport default NavBar;","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Footer.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/MainContainer.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/ProfileRelated/Profile.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionContainer.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionList.js",["99"],"import React, {useState} from 'react'\nimport Search from './Search'\nimport TransactionCard from './TransactionCard'\n\n\nfunction TransactionList({transactions, handleRemoveTransaction, categoriesList}){\n\n    const [selectedCategory, setSelectedCategory] = useState(\"all\")\n\n\n    // console.log(selectedCategory)\n\n    function handleChange(value){\n        setSelectedCategory(value)\n    }\n\n    const filteredTransactions = transactions.filter(transaction =>{\n        if (selectedCategory === \"all\"){\n            return transaction \n        }\n        return transaction.category_id == selectedCategory\n    })\n\n    const transactionsObj = filteredTransactions.map((transaction=> {\n        return <TransactionCard key={transaction.id} transaction={transaction} handleRemoveTransaction={handleRemoveTransaction}/>\n    }))\n\n    return( \n        <>\n        <div className=\"transaction-list-div\">\n            <h3>Transactions:</h3>\n            <Search categoriesList={categoriesList} handleChange={handleChange}/>\n            {transactionsObj}\n            \n\n        </div>\n        </>\n    )\n}\n\n\nexport default TransactionList","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/Search.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BottomHalfBudgetPage/TransactionCard.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/MonthGraph.js",["100"],"import React, { useState, useEffect } from 'react';\nimport {  Doughnut } from \"react-chartjs-2\";\n\n\n\nfunction MonthGraph({selectedMonthData}){\n    const [chartData, setChartData] = useState({})\n    \n    const categoryLabels = selectedMonthData.categories.map(data => data.name)\n    const categoryData = selectedMonthData.categories.map(data => data.budget)\n\n    function chart(){\n        setChartData({\n            labels: categoryLabels,\n            datasets: [\n                {\n                    data: categoryData,\n                    lineTension: 0.1,\n                    backgroundColor: [\"#9acd32\",\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\", \"#bdffbe\", \"#808000\", \"556b2f\"],\n                    borderColor: [\"#9acd32\",\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\",  \"#bdffbe\", \"#808000\",\"556b2f\" ],\n                    borderCapStyle: \"butt\",\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: \"miter\",\n                    pointBorderColor: \"#2085d8\",\n                    pointBackgroundColor: \"#FFF\",\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: \"#2f3640\",\n                    pointHoverBorderColor: \"#2085d8\",\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                }\n            ]\n        })\n    }\n\n    useEffect(() => {\n        chart()\n    }, [selectedMonthData])\n\n    let chartOptions = {\n        responsive: true,\n        title: { text: \"Budget Broken Down into Categories\", \n                display:true, \n                fontSize: 30 \n        },    \n        legend: {\n            position: 'left',\n            labels: {\n                fontSize: 18,\n                padding: 12\n            }\n        },\n        cutoutPercentage: 40,\n        animation: {\n            animateRotate: false,\n            animateScale: true\n          }\n    \n        \n    }\n\n\n    return(\n        <div className=\"doughnut-chart\">\n            <Doughnut\n                data={chartData} \n                options={chartOptions} \n            />\n            \n        </div>\n    );\n}\n\n\nexport default MonthGraph","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/CategoryContainer.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/BudgetPage.js",["101","102","103"],"import React, {useEffect, useState} from 'react'\n// import {useHistory} from 'react-router-dom'\nimport TransactionContainer from './BottomHalfBudgetPage/TransactionContainer'\nimport CreateNewMonthModal from './Modal/CreateNewMonthModal'\nimport Modal from './Modal/MonthlyIncomeModal'\nimport CategoryContainer from './TopHalfBudgetPage/CategoryContainer'\nimport MonthGraph from './TopHalfBudgetPage/MonthGraph'\n\n\nfunction BudgetPage(){\n    const [showMIModal, setShowMIModal] = useState(false)\n    const [createMonthModal, setCreateMonthModal] = useState(false)\n\n\n    const [allMonths, setAllMonths]= useState({})\n    const [selectedMonthNumber, setSelectedMonthNumber] = useState(44) /// let's auto select this\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [transactions, setTransactions] = useState([]) //used to refresh page\n    \n    //month will be selected here, this is where fetch will happen. \n    //Then values will go down to Graph/Containers\n    \n    //look @ time.now to set initial date on page load\n    \n    //initial load\n    useEffect(()=> {\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/monthly_budgets`)\n        .then(resp => resp.json())\n        .then(data => {\n            setAllMonths(data)\n            setIsLoaded(true)\n        })\n    }, [transactions, selectedMonthNumber])\n    \n    if (!isLoaded) return <h2>Loading...</h2>;\n    \n    const existingMonthNums = allMonths.map(month => month.id )\n   \n    function submitTransaction(formData){\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/transactions`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formData),\n        })\n        .then(response => response.json())\n        .then(data => {\n            setTransactions(data);\n        })\n    }\n    \n    function handleRemoveTransaction(id){\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/transactions/${id}`, {\n            method: \"DELETE\"\n        })\n        .then(response => response.json())\n        .then(data => setTransactions(data))\n    }\n    const selectedMonthData = allMonths.find(month=>(month.id == selectedMonthNumber))\n    \n    function handleRemoveCategory(id){\n        \n        fetch(`${process.env.REACT_APP_API_BASE_URL}/categories/${id}`, {\n            method: \"DELETE\"\n            })\n            .then(response => response.json())\n            .then(data => setTransactions(data))\n        \n    }\n\n    function createCategory(formData){\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/categories`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formData),\n          })\n          .then(response => response.json())\n          .then(data => {\n            setTransactions(data);\n          })\n    }\n\n    function submitCategoryEdit(data){\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/categories/${data.id}`, {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n          })\n          .then(response => response.json())\n          .then(data => setTransactions(data))\n    }\n\n    function updateMonthBudget(data){\n        console.log(data)\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/monthly_budgets/${selectedMonthNumber}`, {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n          })\n          .then(response => response.json())\n          .then(data=> setTransactions(data))\n    }\n\n    function monthForward(){\n           if( existingMonthNums.indexOf(selectedMonthNumber+1)>-1 ){\n            setSelectedMonthNumber((selectedMonthNumber+1))\n        }\n    }\n\n    function monthBack(){\n        if(existingMonthNums.indexOf(selectedMonthNumber)){\n            setSelectedMonthNumber((selectedMonthNumber-1))\n        }\n\n    }\n    \n    //sum up total budget\n    const totalBudget = selectedMonthData.categories.map(category => (category.budget))\n    .reduce(( accumulator, currentValue ) => accumulator + currentValue,0).toFixed(2)\n\n    //sums up total spent\n    const totalSpent = selectedMonthData.transactions.map(transaction => transaction.amount)\n    .reduce(( accumulator, currentValue ) => accumulator + currentValue,0).toFixed(2)\n\n    return( \n        <div className=\"budget-page-div\">\n        <div className=\"month-change-buttons-div\">\n            {(existingMonthNums.indexOf(selectedMonthNumber-1) > -1)? <h1 onClick={monthBack} className=\"month-back\">  âï¸  </h1>: null}\n            <h4>{selectedMonthData.name}</h4>\n            {(existingMonthNums.indexOf(selectedMonthNumber+1) > -1)? <h1 onClick={monthForward} className=\"month-forward\"> â¶ï¸ </h1>: null}\n        </div>\n\n        <Modal \n            show={showMIModal} \n            onClose={() => setShowMIModal(false)}\n            currentIncome = {selectedMonthData.budget}\n            updateMonthBudget={updateMonthBudget}\n        />\n        <CreateNewMonthModal \n            show={createMonthModal}\n            onClose={() => setCreateMonthModal(false)}\n            setSelectedMonthNumber = {setSelectedMonthNumber}\n        \n        />\n\n        <div className=\"top-half-budget-page\">\n            \n            <div className=\"text-and-chart-budget-page\">\n                <div className=\"top-half-budget-page-text\">\n                    <div className=\"adjust-add-budget-buttons-div\">\n                        {existingMonthNums.indexOf(selectedMonthNumber+1) == -1 ? <button onClick={() => setCreateMonthModal(true)}>Create New Month</button> : null}\n                    </div>\n                    {/* if (selectedMonthData.categories[0]){  */}\n                        <p>Total Spent {totalSpent}</p>\n                        {totalBudget > selectedMonthData.budget ? <p> Total budget ${totalBudget}. Your budget is higher than your income this month</p> : <p>Total budget: {totalBudget}</p>}\n                    {/* } */}\n                    <p>Monthly Income: {selectedMonthData.budget}</p>\n                    <div className=\"monthly-income-button-div\">\n                        <button onClick={() => setShowMIModal(true)}>Adjust Monthly Income</button>\n                    </div>\n                </div>\n                <div className=\"budget-page-chart-div\">\n                    {selectedMonthData.categories[0]? (\n                     <MonthGraph selectedMonthData={selectedMonthData}/> \n                     ) : (\n                     <div className=\"no-categories-div\">\n                        <h3>You should create some categories for this month</h3>\n                        <h3>Use the button below</h3></div>)}\n                    </div>\n            </div>\n            <CategoryContainer \n                selectedMonthData={selectedMonthData} \n                createCategory={createCategory} \n                handleRemoveCategory={handleRemoveCategory}\n                submitCategoryEdit={submitCategoryEdit}\n            />\n        </div>\n\n        {selectedMonthData.categories[0] ? \n            <div className=\"bottom-half-budget-page\">\n                <TransactionContainer selectedMonthData={selectedMonthData} submitTransaction={submitTransaction} handleRemoveTransaction={handleRemoveTransaction}/>\n            </div>\n        : null}\n        </div>\n    )\n}\n\nexport default BudgetPage","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/CategoryCard.js",["104","105"],"import React, {useState} from 'react'\nimport ProgressBar from './ProgressBar';\nimport styled from \"styled-components\";\n\n\nfunction CategoryCard({category, handleRemoveCategory, submitCategoryEdit}){\n    const [isEditClicked, setIsEditClicked] = useState(false)\n    const {name, budget, id} = category;\n    const [categoryName, setCategoryName] = useState(name)\n    const [budgetValue, setBudgetValue] = useState(budget)\n\n    // console.log(category)\n\n    const totalSpent = category.transactions.map(transaction => {\n        return transaction.amount\n    }).reduce(( accumulator, currentValue ) => accumulator + currentValue,\n        0\n      ).toFixed(2)\n\n      const data1 = [\n          {spending: 1, spent: totalSpent}\n      ]\n\n      const data2 = [\n        {\"budgeted\": 1, spent: budget}\n    ]\n\n    // console.log(isEditClicked)\n    const categoryDataObj = (\n        <>\n        \n            <h3>{name}</h3>\n            <ProgressBar budget={budget} totalSpent={totalSpent}/>\n            <h5>Budget: {budget}</h5>\n            <h5>Total Spent: {totalSpent}</h5>\n            <button\n                className=\"delete-category-btn\" \n                data-id={id}\n                onClick={() => handleRemoveCategory(id)}\n            >ð</button>\n            <button\n                className=\"edit-category-btn\" \n                data-id={id}\n                onClick={() => setIsEditClicked(!isEditClicked)}            \n            >âï¸</button>\n            </>\n    )\n\n    //handle new category form submit\n    function handleSubmit(e){\n        e.preventDefault()\n        \n        submitCategoryEdit({\n            id: id,\n            name: categoryName,\n            budget: parseInt(budgetValue)\n        })\n\n        setIsEditClicked(!isEditClicked)\n\n    }\n\n    // edit category form\n    const categoryEditForm = (\n            <form className=\"edit-category-form\" onSubmit={handleSubmit}>\n                <label> Name:</label>\n                <input\n                    name=\"name\"\n                    value={categoryName}\n                    onChange={(e) => setCategoryName(e.target.value)}\n                />\n                <label> Budget:</label>\n                <input \n                    name=\"budget\"\n                    value = {budgetValue}\n                    onChange={(e) => setBudgetValue(e.target.value)}\n                />\n                <button \n                    type=\"submit\">\n                        submit\n                </button>\n            </form>\n    )\n\n    return( \n        <>\n        {!isEditClicked ? \n            <CategoryCardDiv>\n                {categoryDataObj}\n            </CategoryCardDiv> : \n            <CategoryCardDiv>\n                {categoryEditForm}\n                <button onClick={()=> setIsEditClicked(!isEditClicked)}>Cancel</button>\n            </CategoryCardDiv> }\n        </>\n    )\n}\n\nconst CategoryCardDiv = styled.div`\n    border:1px #ccc solid;\n    width: 20%;\n    align-content: space-around;\n    margin-top: 10;\n    border-radius: 5px;\n`;\n\n\nexport default CategoryCard","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/ProfileRelated/MonthComparisonChart.js",["106"],"import React, {useEffect, useState} from \"react\"\nimport { Bar } from 'react-chartjs-2';\n\n\nfunction MonthComparisonChart({allMonths}){\n    const [chartData, setChartData] = useState({})\n\n    // console.log(allMonths)\n\n\n    const monthlyBudget = allMonths.map(month=> {\n        return month.categories.map(category => (category.budget))\n        .reduce(( accumulator, currentValue ) => accumulator + currentValue,0)\n    })\n    \n    // console.log(\"budget\",monthlyBudget)\n\n    const monthlyActuals = allMonths.map(month=> {\n        return month.transactions.map(transaction => transaction.amount)\n        .reduce(( accumulator, currentValue ) => accumulator + currentValue,0)\n    })\n\n    // console.log(\"Actuals\", monthlyActuals)\n    \n    const monthNames = allMonths.map(month=> month.name)\n\n    // console.log(monthNames)\n\n\n    //chart\n\n\n    function chart(){\n        setChartData({\n            labels: monthNames,\n            datasets: [\n                {\n                    data: monthlyActuals,\n                    lineTension: 0.1,\n                    backgroundColor: [\"#9acd32\",\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\", \"#bdffbe\", \"#808000\", \"556b2f\"],\n                    borderColor: [\"#9acd32\",\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\",  \"#bdffbe\", \"#808000\",\"556b2f\" ],\n                    borderCapStyle: \"butt\",\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: \"miter\",\n                    pointBorderColor: \"#2085d8\",\n                    pointBackgroundColor: \"#FFF\",\n  \n                    pointHoverBackgroundColor: \"#2f3640\",\n                    pointHoverBorderColor: \"#2085d8\",\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    label: \"actuals\"\n                },\n                {\n                    data: monthlyBudget,\n                    lineTension: 0.1,\n                    backgroundColor: [\"#0f52ba\", \"#0f52ba\", \"#0f52ba\", \"#0f52ba\"],//,\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\", \"#bdffbe\", \"#808000\", \"556b2f\"],\n                    borderColor: [\"#0f52ba\"],//,\"#006400\", \"#228b22\", \"#3cb371\",\"#00fa9a\",\"#98fb98\", \"#3cb371\",  \"#bdffbe\", \"#808000\",\"556b2f\" ],\n                    borderCapStyle: \"butt\",\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: \"miter\",\n                    pointBorderColor: \"#2085d8\",\n                    pointBackgroundColor: \"#FFF\",\n             \n                    pointHoverBackgroundColor: \"#2f3640\",\n                    pointHoverBorderColor: \"#2085d8\",\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    label: \"budget\"\n                }\n            ]\n        })\n    }\n\n    //scales stacks the chart, if I wanted bar graph made up of different categories\n    let chartOptions = {\n        // scales: {\n        //     xAxes: [{\n        //         stacked: true\n        //     }],\n        //     yAxes: [{\n        //         stacked: true\n        //     }]\n        // }\n    }\n\n\n\n    useEffect(() => {\n        chart()\n    }, [])\n\n\n\n\n    return( \n        <>\n        <h3>MonthComparisonChart</h3>\n        <div className=\"monthly-comparison-chart-div\">\n            <Bar\n                data={chartData}\n                options={chartOptions}\n            />\n        </div>\n\n        </>\n    )\n}\n\n\nexport default MonthComparisonChart;","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/Modal/MonthlyIncomeModal.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Login.js",["107"],"import {createContext, useState} from \"react\";\nimport ReactDOM from \"react-dom\";\n\n\n//global state: loggedIn?\n\n//create context obj\nconst LoginContext = createContext();\n\n//context provider component\nfunction LoginProvider({children}){\n    const [loggedIn, setLoggedIn] = useState(false)\n\n\n    function toggle(){\n        setLoggedIn(loggedIn => !loggedIn)\n    }\n\n\n    const value = {loggedIn: loggedIn, toggle: toggle}\n\n    return (\n        <LoginContext.Provider value={value}>{children}</LoginContext.Provider>\n    );\n}\n\nexport {LoginContext, LoginProvider};\n ","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/Modal/CreateNewMonthModal.js",[],"/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/HomePage/Home.js",["108"],"import React from \"react\"\nimport ReactDOM from 'react-dom'\n// import { \n//     VictoryBar, \n//     VictoryChart, \n//     VictoryGroup, \n//     VictoryLegend } from 'victory';\n\nfunction Home(){\n\n\n    \n\n\n    // const data = [\n    //     {quarter: 1, budget: 13000},\n     \n    //   ];\n\n    // const data2 = [\n    //     {quarter: 1, expense: 20000},\n     \n    //   ];\n\n\n\n\n\n    return(\n        <div>\n        <h1> this is Home</h1>\n\n\n\n\n\n\n\n\n\n{/*         \n        <VictoryChart\n            domainPadding={20}\n            // theme={VictoryTheme.greyscale}\n            >\n            <VictoryLegend x={125} y={50}\n                gutter={30}\n                style={{ border: { stroke: \"black\" }, title: {fontSize: 20 } }}\n                orientation=\"horizontal\"\n\n                data={[\n                    { name: \"Budget\" }, { name: \"Total Expenses\" }\n                  ]}\n                />\n            <VictoryGroup\n            offset={10}\n            >            \n\n                <VictoryBar \n                     color='#0080ff'\n                    animate={{ duration: 1000 }}\n                    data={data}\n                    x=\"quarter\"\n                    y=\"budget\"\n                    />\n                 <VictoryBar\n                    animate={{ duration: 1000 }}\n                    data={data2}\n                    x=\"quarter\"\n                    y=\"expense\"\n                    />\n                </VictoryGroup> \n        </VictoryChart> */}\n\n        </div>\n    )\n}\n\nexport default Home;","/Users/anapoletano/Flatiron/code/Mod5/findex/src/Components/BudgetRelated/TopHalfBudgetPage/ProgressBar.js",["109","110"],"import React from \"react\"\n\n\nfunction ProgressBar({budget, totalSpent}){\n\n\nlet percentage = (totalSpent/budget)*100\n\nlet progressBarColor\nif (percentage > 100){\n     percentage = 100\n     progressBarColor = \"red\"\n} else if(percentage==0){\n    progressBarColor = \"rgb(165, 164, 187)\"\n}else if(percentage==100){\n    progressBarColor = \"#347c17\"\n}else if(percentage >= 90 && percentage < 100){\n    progressBarColor = \"rgb(203, 172, 48)\"\n\n}else {\n    progressBarColor = \"rgb(95, 142, 167)\"\n}\n\nconst myStyle ={\n    width: `${percentage}%`,\n    background: progressBarColor,\n    zIndex: 3,\n}\n\n\n\nreturn(\n        <div className=\"progress-bar\" >\n                <div \n                    className=\"progress-filler\" \n                    style={myStyle}>\n\n                </div>\n\n        </div>\n)\n}\n\nexport default ProgressBar",{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":28,"nodeType":"117","messageId":"118","endLine":1,"endColumn":36},{"ruleId":"119","severity":1,"message":"120","line":21,"column":40,"nodeType":"121","messageId":"122","endLine":21,"endColumn":42},{"ruleId":"123","severity":1,"message":"124","line":41,"column":8,"nodeType":"125","endLine":41,"endColumn":27,"suggestions":"126"},{"ruleId":"119","severity":1,"message":"120","line":57,"column":63,"nodeType":"121","messageId":"122","endLine":57,"endColumn":65},{"ruleId":"127","severity":1,"message":"128","line":139,"column":5,"nodeType":"129","messageId":"130","endLine":142,"endColumn":29},{"ruleId":"119","severity":1,"message":"120","line":182,"column":83,"nodeType":"121","messageId":"122","endLine":182,"endColumn":85},{"ruleId":"115","severity":1,"message":"131","line":20,"column":13,"nodeType":"117","messageId":"118","endLine":20,"endColumn":18},{"ruleId":"115","severity":1,"message":"132","line":24,"column":13,"nodeType":"117","messageId":"118","endLine":24,"endColumn":18},{"ruleId":"123","severity":1,"message":"124","line":95,"column":8,"nodeType":"125","endLine":95,"endColumn":10,"suggestions":"133"},{"ruleId":"115","severity":1,"message":"134","line":2,"column":8,"nodeType":"117","messageId":"118","endLine":2,"endColumn":16},{"ruleId":"115","severity":1,"message":"134","line":2,"column":8,"nodeType":"117","messageId":"118","endLine":2,"endColumn":16},{"ruleId":"119","severity":1,"message":"120","line":13,"column":21,"nodeType":"121","messageId":"122","endLine":13,"endColumn":23},{"ruleId":"119","severity":1,"message":"120","line":15,"column":20,"nodeType":"121","messageId":"122","endLine":15,"endColumn":22},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chart'. Either include it or remove the dependency array.","ArrayExpression",["137"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'data1' is assigned a value but never used.","'data2' is assigned a value but never used.",["138"],"'ReactDOM' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [chart, selectedMonthData]",{"range":"143","text":"144"},"Update the dependencies array to be: [chart]",{"range":"145","text":"146"},[1524,1543],"[chart, selectedMonthData]",[3262,3264],"[chart]"]